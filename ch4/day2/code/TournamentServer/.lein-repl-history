games
(swap! games conj ["andrew", "timmy"])
games
@games
(flatten games)
(flatten @games)
(not (contains? (flatten @games) "andrew")
)
(not (contains? (flatten @games) "andrew"))
(flatten @games)
(not (contains? (flatten @games) "andrew"))
(flatten @games)
(not (contains? "andrew" (flattten @games)))
(not (contains? "andrew" (flatten @games)))
(contains? "andrew" (flatten @games))
(some #{"andrew}" (flatten @games))
(some #{"andrew"} (flatten @games))
exit
(swap! games conj ["andrew", "timmy"])
(swap! players conj "andrew")
(swap! players conj "timmy")
(swap! players conj "john")
(next-players)
(count (next-players))
(let [game next-players] (count next-players))
(let [game next-players] (count game))
(let [game next-players] game)
(let [game (next-players)] game)
(let [game (next-players)] (count game))
exit
(swap! players conj "john")
(swap! players conj "timmy")
(swap! players conj "andrew")
(let [game (next-players)] (count game))
(let [game (next-players)] (if (= (count game) 2)) "yes" "no")
(let [game (next-players)] (if (= (count game) 2) "yes" "no"))
(let [game (next-players)] (if (= (count game) 2) (swap! games conj game) "no"))
exit
(let [game (next-players)] (if (= (count game) 2) ((swap! games conj game) "yes") "no"))
(swap! players conj "andrew")
(swap! players conj "timmy")
(let [game (next-players)] (if (= (count game) 2) ((swap! games conj game) "yes") "no"))
exit
(swap! players conj "andrew")
(swap! players conj "john")
(swap! players conj "timmy")
(create-game)
exit
(swap! players conj "john")
(swap! players conj "timmy")
(swap! players conj "andrew")
(create-game)
