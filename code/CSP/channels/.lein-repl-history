(def c (chan))
(thread (>!! c "Hello)
(thread (>!! c "Hello")
(thread (>!! c "Hello"))
(thread (>!! c "Hello") (print ln "write completed")
)
(thread (>!! c "Hello") (println "write completed"))
(<!! c)
(def bc (chan 5))
(>!! bc 0)
(>!! bc 1)
(close! bc)
(<!! bc)
(def ch (chan 10))
(writealll! ch (range 0 10))
(writeall! ch (range 0 10))
(writeall!! ch (range 0 10))
(readall!! ch)
(def ch (chan 10))
(onto-chan ch (range 0 10))
(<!! (async/into [] ch))
(def dc (chan (dropping-buffer 5)))
(onto-chan dc (range 0 10))
(<!! (ansync/into [] dc))
(<!! (async/into [] dc))
(def sc (chan (sliding-buffer 5)))
(onto-chan sc (range 0 10))
(<!! (async/into [] sc))
(def ch (chan))
(go 
(let [x (<! ch)
y (<! ch)]
(println "Sum:" (+ x y))
))
(>!! ch 3)
(>!! ch 4)
(<!! (go (+ 3 4))
)
(def ch (chan 10))
(def mapped (map-chan (partial * 2) ch))
(onto-chan ch (range 0 10))
(<!! (ansync/into [] mapped))
(<!! (async/into [] mapped))
(def ch (to-chan (range 0 10)))
(<!! (ansyc/into [] (map< (partial *2) (filter< even? ch))))
(<!! (asnyc/into [] (map< (partial *2) (filter< even? ch))))
(<!! (async/into [] (map< (partial *2) (filter< even? ch))))
(macroexpand-1 '( alt! ch1 ([ x] (println x)) ch2 ([ y] (println y))))
exit
