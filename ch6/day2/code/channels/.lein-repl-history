(def c (chan))
(thread (>!! c "Hello)
(thread (>!! c "Hello")
(thread (>!! c "Hello"))
(thread (>!! c "Hello") (print ln "write completed")
)
(thread (>!! c "Hello") (println "write completed"))
(<!! c)
(def bc (chan 5))
(>!! bc 0)
(>!! bc 1)
(close! bc)
(<!! bc)
(def ch (chan 10))
(writealll! ch (range 0 10))
(writeall! ch (range 0 10))
(writeall!! ch (range 0 10))
(readall!! ch)
(def ch (chan 10))
(onto-chan ch (range 0 10))
(<!! (async/into [] ch))
(def dc (chan (dropping-buffer 5)))
(onto-chan dc (range 0 10))
(<!! (ansync/into [] dc))
(<!! (async/into [] dc))
(def sc (chan (sliding-buffer 5)))
(onto-chan sc (range 0 10))
(<!! (async/into [] sc))
(def ch (chan))
(go 
(let [x (<! ch)
y (<! ch)]
(println "Sum:" (+ x y))
))
(>!! ch 3)
(>!! ch 4)
(<!! (go (+ 3 4))
)
(def ch (chan 10))
(def mapped (map-chan (partial * 2) ch))
(onto-chan ch (range 0 10))
(<!! (ansync/into [] mapped))
(<!! (async/into [] mapped))
(def ch (to-chan (range 0 10)))
(<!! (ansyc/into [] (map< (partial *2) (filter< even? ch))))
(<!! (asnyc/into [] (map< (partial *2) (filter< even? ch))))
(<!! (async/into [] (map< (partial *2) (filter< even? ch))))
(macroexpand-1 '( alt! ch1 ([ x] (println x)) ch2 ([ y] (println y))))
exit
(def target (chan))
(def multiplier (my-map> partial * 2 target))
(def multiplier (my-map> (partial * 2) target))
(>! multiplier 3)
(>!! multiplier 3)
(<!! target)
exit
(def seq [1,2,3,4,5])
(def my-seq [1,2,3,4,5])
(def mapped-ch (ch-pmap (partial * 2) my-seq))
(<!! mapped-ch)
(def mapped-ch (ch-pmap ((Thread/sleep 1000)(partial * 2)) my-seq))
(defn sleep-double [] (Thread/sleep 1000)(partial * 2))
(def mapped-ch (ch-pmap sleep-double my-seq))
(def mapped-ch (ch-pmap (sleep-double) my-seq))
(<!! mapped-ch)
(time (def mapped-ch (ch-pmap (sleep-double) my-seq)))
exit
(def evens (to-chan [2,4,6,8])
)
(def odds (to-chan [2,4,6,8]))
(def merged (my-merge [evens,odds])
)
alts! [evens, odds]
(def res (alts! [evens, odds]))
(def res (go (alts! [evens, odds])))
(<! res)
(<!! res)
(!!< (<!! res))
(<!! (<!! res))
(<!! res)
(def res (go (alts! [evens, odds])))
(<!! (<!! res))
(<!! res)
(def res (go (alts! [evens, odds])))
(<!! res)
(def res (go (alts! [evens, odds])))
(<!! res)[0]
exit
(def evens (to-chan [2,4,6,8]))
(def odds (to-chan [1,3,5,7]))
(def merged (my-merge [evens,odds])
)
(<!! merged)
exit
(def evens (to-chan [2,4,6,8]))
(def odds (to-chan [1,3,5,7]))
(def merged (my-merge [evens,odds]))
(<!! merged)
(count [1,2])
exit
(def evens (to-chan [2,4,6,8]))
(def odds (to-chan [1,3,5,7]))
(def merged (my-merge [evens,odds]))
(<!! merged)
(count [1,2])
(count [1,2])> 0
(> 0 (count [1,2]))
(> (count [1,2]) 0)
exit
(def evens (to-chan [2,4,6,8]))
(def odds (to-chan [1,3,5,7]))
(def merged (my-merge [evens,odds]))
(<!! merged)
exit
